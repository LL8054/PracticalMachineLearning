print(CMmodelFit)
print(CMmodelFit80)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
colname(segmentationOriginal)
colnames(segmentationOriginal)
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
View(training)
View(segmentationOriginal)
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
modFit <- (Case ~ ., method = "rpart", segmentationOriginal)
set.seed(125)
modFit <- (Case ~ ., method = "rpart", data=training)
set.seed(125)
modFit <- (Case ~ . , method = "rpart", data=training)
set.seed(125)
modFit <- train(Case ~ ., method = "rpart", training)
set.seed(125)
modFit <- train(Case ~ ., method = "rpart", data=training)
set.seed(125)
modFit <- train(Case ~ ., data = training, method = "rpart")
View(testing)
View(training)
is.na(training)
table(is.na(training))
library(rpart)
set.seed(125)
modFit <- train(Case ~ ., data = training, method = "rpart")
training$Case
train <- subset(segmentationOriginal, case=="Train")
test <- subset(segmentationOriginal, case=="Test")
train <- subset(segmentationOriginal, Case=="Train")
test <- subset(segmentationOriginal, Case=="Test")
is.identical(training, train)
identical(training, train)
identical(testing, test)
set.seed(125)
modFit <- train(Case ~ ., data = train, method = "rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
modFit <- train(Case ~ ., data = training, method = "rpart")
set.seed(125)
modFit <- train(Case ~ ., data = training, method = "rpart")
install.packages(rattle)
install.packages("rattle")
library(rattle)
set.seed(125)
modFit <- train(Case ~ ., data = training, method = "rpart")
set.seed(125)
modFit <- train(Case ~ ., data = training, method = "rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
modFit <- train(Class ~ ., data = train, method = "rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
set.seed(125)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
modFit <- train(Case ~ ., data = training, method = "rpart")
segmentationOriginal
head(segmentationOriginal)
modFit <- train(Class ~ ., data = training, method = "rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
set.seed(125)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
modFit <- train(Class ~ ., data = training, method = "rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
modFit <- train(Class ~ ., training, method = "rpart")
modFinal <- train(Class ~ ., training, method="rpart", TotalIntench2=23,000, FiberWidthCh1=10, PerimStatusCh1=2)
modfit$FinalModel
modFit$FinalModel
modFit$finalModel
library(pgmm)
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modelFit <- train(Area ~ ., olive, method="rpart")
fancyRpartPlot(modFit$finalodel)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(caret)
fancyRpartPlot(modFit$finalModel)
library("rpart.plot")
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
newModel <- predict(modelFit, newdata)
newModel
colnames(olive)
class(olive$Area)
modelFit$finalModel
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
colnames(SAheart)
set.seed(13234)
modelFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, trainSA, method="glm", family="binomial")
prediction <- predict(modelFit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(testSA)
missClass(prediction)
missClass(trainSA$chd, predict(modelFit, trainSA))
missTrain <- missClass(trainSA$chd, predict(modelFit, trainSA))
missTest <- missClass(trainSA$chd, predict(modelFit, testSA))
missTrain
missTest
missTrain <- missClass(trainSA$chd, predict(modelFit, trainSA))
missTest <- missClass(testSA$chd, predict(modelFit, testSA))
missTrain
missTest
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
colnames(ElemStatLearn)
head(ElemStatLearn)
ElemStatLearn
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
class(vowel.train)
colnames(vowel.train)
class(vowel.train$y)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
class(vowel.test$y)
set.seed(33833)
modelFit <- train(y~., vowel.train, method="rf")
order(varImp(modelFit))
set.seed(33833)
modelFit <- train(y~., vowel.train, method="rf", prox=TRUE)
order(varImp(modelFit))
modelFit
varImp(modelFit)
order(varImp(modelFit))
class(modelFit)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
order(varImp(a))
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelFit <- train(y~., vowel.train, method="rf", prox=TRUE)
varImp(modelFit)
prediction <- predict(vowel.test, modelFit)
prediction <- predict(modelFit, vowel.test)
varImp(prediction)
prediction
modelFit
prediction
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(3833)
modelFit <- train(y~., vowel.train, method="rf", prox=TRUE)
varImp(modelFit)
library(ISLR)
install.packages("ISLR")
library(ISLR)
data(Wage)
library(ggplot2)
library(caret)
inBuild <- createDataPartition(y=Wage$wage, p=.7, list=FALSE)
validation <- Wage[-inBuild,]
buildData <- Wage[inBuild]
inTrain <- createDataPartition(y=buildData$wage, p=.7, list=FALSE)
buildData <- Wage[inBuild,]
inTrain <- createDataPartition(y=buildData$wage, p=.7, list=FALSE)
training <- buildData[inTrain,]
testing <- buildData[-inTrain,]
dim(training)
dim(testing)
dim(validatin)
dim(validation)
mod1 <- train(wage ~ ., method="glm", data=training)
mod2 <- train(wage ~., method="rf", data=training, trControl=trainControl(method="cv"), number=3)
pred1 <- predict(mod1, testing)
pred1
pred2 <- predict(mod2, testing)
qplot(pred1, pred2, color=wage, data=testing)
testing$wage
training$wage
preDF <- data.frame(pred1, pred2, wage=testing$wage)
preDF
head(preDF)
exit
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
is.factor(y)
head(vowel.train)
is.factor(vowel.train$y)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
head(vowel.train)
dim(vowel.train)
?trainControl
library(caret)
?trainControl
rf <- train(y~., method="rf", data=vowel.train)
rf
gbm <- train(y~., method="gbm", data=vowel.train)
prf <- predict(rf, vowel.train)
pgbm <- predict(gbm, bowel.train)
prf <- predict(rf, vowel.train)
pgbm <- predict(gbm, vowel.train)
setwd("~/datasciencecoursera/Courses/PracticalMachineLearning/Project")
prf$overall['Accuracy']
pgbm$overall['Accuracy']
prf <- predict(rf, vowel.test)
pgbm <- predict(gbm, vowel.test)
cmrf <- confusionMatrix(prf, vowel.test$y)
cmgbm <- confusionMatrix(pgbm, vowe.test$y)
cmrf <- confusionMatrix(prf, vowel.test$y)
cmgbm <- confusionMatrix(pgbm, vowel.test$y)
prf$overall['Accuracy']
pgbm$overall['Accuracy']
cmrf$overall['Accuracy']
cmgbm$overall['Accuracy']
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
library(gbm)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
rf <- train(y~., method="rf", data=vowel.train)
gbm <- train(y~., method="gbm", data=vowel.train)
prf <- predict(rf, vowel.test)
pgbm <- predict(gbm, vowel.test)
cmrf <- confusionMatrix(prf, vowel.test$y)
cmgbm <- confusionMatrix(pgbm, vowel.test$y)
datacombined <- data.frame(prf, pgbm, y=vowel.test$y)
datacombined
fit <- train(y~., data=datacombined, method="gam")
pfit <- predict(fit, data=vowel.test)
pfit <- predict(fit, newdata=vowel.test)
pfit <- predict(fit, datacombined)
pfit
vowel.test$y
vowel.test$y
vowel.train$y
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
library(gbm)
library(mgcv)
library(nlme)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
rf <- train(y~., method="rf", data=vowel.train)
gbm <- train(y~., method="gbm", data=vowel.train)
prf <- predict(rf, vowel.test)
pgbm <- predict(gbm, vowel.test)
cmrf <- confusionMatrix(prf, vowel.test$y)
cmgbm <- confusionMatrix(pgbm, vowel.test$y)
View(vowel.test)
datacombined <- data.frame(prf, pgbm, y=vowel.test$y)
fit <- train(y~., data=datacombined, method="gam")
pfit <- predict(fit, datacombined)
pfit
cmpfit <- confusionMatrix(pfit, datacombined$y)
cmpfit
cmpfit$overall['Accuracy']
cmpfit <- confusionMatrix(pfit, vowel.test)
cmpfit <- confusionMatrix(pfit, vowel.test$y)
cmpfit
sqrt(sum((prf-vowel.test$y)^2))
datacombined
adata <- datacombined[is.identical(datacombined[1],datacombined[2]),]
?is.identical
adata <- datacombined[identical(datacombined[1],datacombined[2]),]
adata
datacombined[1]
datacombined[1]
adata <- datacombined[identical(datacombined[,1],datacombined[,2]),]
adata
datacombined[,1]
rows(datacombined)
numrows(datacombined)
nrows(datacombined)
numrow(datacombined)
nrow(datacombined)
for (i in 1:nrow(datacombined)) {
adata <- datacombined[identical(datacombined[i,1],datacombined[i,2]),]
}
adat
adata
for (i in 1:nrow(datacombined)) {
adata[i,] <- datacombined[identical(datacombined[i,1],datacombined[i,2]),]
}
adata
head(datacombined)
for (i in 1:nrow(datacombined)) {
adata[(nrow(adata)+1,] <- datacombined[identical(datacombined[i,1],datacombined[i,2]),]
}
for (i in 1:nrow(datacombined)) {
adata[(nrow(adata)+1),] <- datacombined[identical(datacombined[i,1],datacombined[i,2]),]
}
adata <- data.frame()
for (i in 1:nrow(datacombined)) {
adata[(nrow(adata)+1),] <- datacombined[identical(datacombined[i,1],datacombined[i,2]),]
}
adata
for (i in 1:nrow(datacombined)) {
if (identical(datacombined[i,1],datacombined[i,2])){
adata[(nrow(adata)+1),] <- datacombined[identical(datacombined[i,1],datacombined[i,2]),]
}
}
adata <- data.frame()
for (i in 1:nrow(datacombined)) {
if (identical(datacombined[i,1],datacombined[i,2])){
adata[(nrow(adata)+1),] <- datacombined[identical(datacombined[i,1],datacombined[i,2]),]
}
}
adata
adata <- data.frame()
for (i in 1:nrow(datacombined)) {
if (identical(datacombined[i,1],datacombined[i,2])){
adata[(nrow(adata)+1),] <- datacombined[datacombined[i,1],datacombined[i,2],]
}
}
adata <- data.frame()
for (i in 1:nrow(datacombined)) {
if (identical(datacombined[i,1],datacombined[i,2])){
adata[(nrow(adata)+1),] <- datacombined[datacombined[i,1],datacombined[i,2],]
}
}
adata <- data.frame()
for (i in 1:nrow(datacombined)) {
if (identical(datacombined[i,1],datacombined[i,2])){
adata[(nrow(adata)+1),] <- datacombined[i,]
}
}
adata
warnings()
datacombined
head(datacombined)
adata <- data.frame(c("prf", "pgbm", "y"))
for (i in 1:nrow(datacombined)) {
if (identical(datacombined[i,1],datacombined[i,2])){
adata[(nrow(adata)+1),] <- datacombined[i,]
}
}
adata
head(adata)
adata <- data.frame("prf", "pgbm", "y")
for (i in 1:nrow(datacombined)) {
if (identical(datacombined[i,1],datacombined[i,2])){
adata[(nrow(adata)+1),] <- datacombined[i,]
}
}
head(adata)
adata <- data.frame("prf"=numeric(), "pgbm"=numeric(), "y"=numeric())
for (i in 1:nrow(datacombined)) {
if (identical(datacombined[i,1],datacombined[i,2])){
adata[(nrow(adata)+1),] <- datacombined[i,]
}
}
adata
count <- 0
for (i in 1:nrow(adata)) {
if (identical(adata[i,2], adata[i,3])) {
count + 1
}
}
count
count / nrow(adata)
count <- 0
for (i in 1:nrow(adata)) {
if (identical(adata[i,2], adata[i,3])) {
count <- count + 1
}
}
count
count / nrow(adata)
set.seed(33833); datacombined <- data.frame(prf, pgbm, y=vowel.test$y)
fit <- train(y~., data=datacombined, method="gam")
pfit <- predict(fit, datacombined)
cmpfit <- confusionMatrix(pfit, vowel.test$y)
cmpfit$overall['Accuracy']
pfit <- predict(fit, vowel.test)
cmpfit <- confusionMatrix(pfit, vowel.test$y)
cmpfit$overall['Accuracy']
datacombined <- data.frame(prf, pgbm, y=vowel.test$y)
fit <- train(y~., method="gam", datacombined)
pfit <- predict(fit, datacombined)
cmpfit <- confusionMatrix(pfit, vowel.test$y)
cmpfit$overall['Accuracy']
warnings()
class(datacombined[1])
class(datacombined[2])
class(datacombined[3])
datacombined[1]
class(datacombined[1,2])
class(datacombined[1,1])
class(datacombined[1,4])
class(datacombined[1,3])
?train
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
fitRF <- train(diagnosis~., method="rf", training)
pRF <- predict(diagnoses~., testing)
cmRF <- confusionMatrix(pRF, testing)
cmRF$overalll['Accuracy']
#RF
fitRF <- train(diagnosis~., method="rf", training)
pRF <- predict(fitRF, testing)
cmRF <- confusionMatrix(pRF, testing)
cmRF$overalll['Accuracy']
#boosted trees
fitGBM <- train(diagnosis~., method="gbm", training)
pGBM <- predict(fitGBM, testing)
cmGBF <- confusionMatrix(pGBM, testing)
cmGBF$overall['Accuracy']
fitRF <- train(diagnosis~., method="rf", training)
pRF <- predict(fitRF, testing)
cmRF <- confusionMatrix(pRF, testing)
cmRF$overalll['Accuracy']
testing
fitRF <- train(diagnosis~., method="rf", training)
pRF <- predict(fitRF, testing)
cmRF <- confusionMatrix(pRF, testing)
cmRF$overalll['Accuracy']
cmRF <- confusionMatrix(pRF, testing$diagnosis)
cmRF$overalll['Accuracy']
cmRF$overall['Accuracy']
combinedset <- data.frame(pRF, pGBF, pLDA, diagnosis <- testing$diagnosis)
combinedset <- data.frame(pRF, pGBM, pLDA, diagnosis <- testing$diagnosis)
set.seed(62433)
#RF
fitRF <- train(diagnosis~., method="rf", training)
pRF <- predict(fitRF, testing)
cmRF <- confusionMatrix(pRF, testing$diagnosis)
cmRF$overall['Accuracy']
#boosted trees
fitGBM <- train(diagnosis~., method="gbm", training)
pGBM <- predict(fitGBM, testing)
cmGBF <- confusionMatrix(pGBM, testing$diagnosis)
cmGBF$overall['Accuracy']
#linear discriminant analysis
fitLDA <- train(diagnosis~., method="lda", training)
pLDA <- predict(fitLDA, testing)
cmLDA <- confusionMatrix(pLDA, testing$diagnosis)
cmLDA$overall['Accuracy']
combinedset <- data.frame(pRF, pGBM, pLDA, diagnosis <- testing$diagnosis)
fit <- train(diagnosis~., combinedset)
predict <- predict(fit, combinedset)
cm <- confusionMatrix(predict, testing$diagnosis)
cm$overall['Accuracy']
cm
combinedset
