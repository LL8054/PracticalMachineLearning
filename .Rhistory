library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData5 = data.frame(diagnosis,predictors)
inTrain5 = createDataPartition(adData5$diagnosis, p = 3/4)[[1]]
training5 = adData[ inTrain5,]
testing5 = adData[-inTrain5,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData5 = data.frame(diagnosis,predictors)
inTrain5 = createDataPartition(adData5$diagnosis, p = 3/4)[[1]]
training5 = adData5[ inTrain5,]
testing5 = adData5[-inTrain5,]
set.seed(3433)
IL <- grep("^IL", colnames(training5), value = TRUE)
df <- data.frame(diagnosis, predictorsIL)
inTrain5_2 = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training5_2 = df[inTrain5_2, ]
testing5_2 = df[-inTrain5_2, ]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3443)
IL <- grep("^IL", colnames(training))
newpredictors <- predictors[,IL]
newData=data.frame(diagnosis, newpredictors)
in2Train <- createDataPartition(newData$diagnosis, p=3/4)[[1]]
newTrain <- newData[in2Train,]
newTest <- newData[-in2Train,]
modelFit <- train(diagnosis ~ ., method="glm", data=newTrain)
PmodelFit <- predict(modelFit, newTest)
CMmodelFit <- confusionMatrix(newTest$diagnosis, PmodelFit)
CModelFit
CMmodelFit
set.seed(3443)
modelFit80 <- train(diagnosis ~ ., method="glm", preProcess="pca", trControl = trainControl(preProcOptions = list(thresh = 0.8)), data=newTrain)
PmodelFit80 <- predict(modelFit80, newTest)
CMModelFit80 <- confusionMatrix(newTest$diagnosis, PmodelFit80)
CMModelFit80
?grep
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3443)
IL <- grep("^IL", colnames(training), values=TRUE)
newpredictors <- predictors[,IL]
newData=data.frame(diagnosis, newpredictors)
in2Train <- createDataPartition(newData$diagnosis, p=3/4)[[1]]
newTrain <- newData[in2Train,]
newTest <- newData[-in2Train,]
## MODELS
## As they are
modelFit <- train(diagnosis ~ ., method="glm", data=newTrain)
PmodelFit <- predict(modelFit, newTest)
CMmodelFit <- confusionMatrix(newTest$diagnosis, PmodelFit)
## PCA with 80% variance explained
set.seed(3443)
modelFit80 <- train(diagnosis ~ ., method="glm", preProcess="pca", trControl = trainControl(preProcOptions = list(thresh = 0.8)), data=newTrain)
PmodelFit80 <- predict(modelFit80, newTest)
CMmodelFit80 <- confusionMatrix(newTest$diagnosis, PmodelFit80)
print(CMmodelFit)
print(CMmodelFit80)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3443)
IL <- grep("^IL", colnames(training), value=TRUE)
newpredictors <- predictors[,IL]
newData=data.frame(diagnosis, newpredictors)
in2Train <- createDataPartition(newData$diagnosis, p=3/4)[[1]]
newTrain <- newData[in2Train,]
newTest <- newData[-in2Train,]
## MODELS
## As they are
modelFit <- train(diagnosis ~ ., method="glm", data=newTrain)
PmodelFit <- predict(modelFit, newTest)
CMmodelFit <- confusionMatrix(newTest$diagnosis, PmodelFit)
## PCA with 80% variance explained
set.seed(3443)
modelFit80 <- train(diagnosis ~ ., method="glm", preProcess="pca", trControl = trainControl(preProcOptions = list(thresh = 0.8)), data=newTrain)
PmodelFit80 <- predict(modelFit80, newTest)
CMmodelFit80 <- confusionMatrix(newTest$diagnosis, PmodelFit80)
print(CMmodelFit)
print(CMmodelFit80)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
IL <- grep("^IL", colnames(training), value=TRUE)
newpredictors <- predictors[,IL]
newData=data.frame(diagnosis, newpredictors)
in2Train <- createDataPartition(newData$diagnosis, p=3/4)[[1]]
newTrain <- newData[in2Train,]
newTest <- newData[-in2Train,]
## MODELS
## As they are
modelFit <- train(diagnosis ~ ., method="glm", data=newTrain)
PmodelFit <- predict(modelFit, newTest)
CMmodelFit <- confusionMatrix(newTest$diagnosis, PmodelFit)
## PCA with 80% variance explained
set.seed(3433)
modelFit80 <- train(diagnosis ~ ., method="glm", preProcess="pca", trControl = trainControl(preProcOptions = list(thresh = 0.8)), data=newTrain)
PmodelFit80 <- predict(modelFit80, newTest)
CMmodelFit80 <- confusionMatrix(newTest$diagnosis, PmodelFit80)
print(CMmodelFit)
print(CMmodelFit80)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL <- grep("^IL", colnames(training), value=TRUE)
newpredictors <- predictors[,IL]
newData=data.frame(diagnosis, newpredictors)
in2Train <- createDataPartition(newData$diagnosis, p=3/4)[[1]]
newTrain <- newData[in2Train,]
newTest <- newData[-in2Train,]
## MODELS
## As they are
modelFit <- train(diagnosis ~ ., method="glm", data=newTrain)
PmodelFit <- predict(modelFit, newTest)
CMmodelFit <- confusionMatrix(newTest$diagnosis, PmodelFit)
## PCA with 80% variance explained
modelFit80 <- train(diagnosis ~ ., method="glm", preProcess="pca", trControl = trainControl(preProcOptions = list(thresh = 0.8)), data=newTrain)
PmodelFit80 <- predict(modelFit80, newTest)
CMmodelFit80 <- confusionMatrix(newTest$diagnosis, PmodelFit80)
print(CMmodelFit)
print(CMmodelFit80)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
colname(segmentationOriginal)
colnames(segmentationOriginal)
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
View(training)
View(segmentationOriginal)
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
modFit <- (Case ~ ., method = "rpart", segmentationOriginal)
set.seed(125)
modFit <- (Case ~ ., method = "rpart", data=training)
set.seed(125)
modFit <- (Case ~ . , method = "rpart", data=training)
set.seed(125)
modFit <- train(Case ~ ., method = "rpart", training)
set.seed(125)
modFit <- train(Case ~ ., method = "rpart", data=training)
set.seed(125)
modFit <- train(Case ~ ., data = training, method = "rpart")
View(testing)
View(training)
is.na(training)
table(is.na(training))
library(rpart)
set.seed(125)
modFit <- train(Case ~ ., data = training, method = "rpart")
training$Case
train <- subset(segmentationOriginal, case=="Train")
test <- subset(segmentationOriginal, case=="Test")
train <- subset(segmentationOriginal, Case=="Train")
test <- subset(segmentationOriginal, Case=="Test")
is.identical(training, train)
identical(training, train)
identical(testing, test)
set.seed(125)
modFit <- train(Case ~ ., data = train, method = "rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
modFit <- train(Case ~ ., data = training, method = "rpart")
set.seed(125)
modFit <- train(Case ~ ., data = training, method = "rpart")
install.packages(rattle)
install.packages("rattle")
library(rattle)
set.seed(125)
modFit <- train(Case ~ ., data = training, method = "rpart")
set.seed(125)
modFit <- train(Case ~ ., data = training, method = "rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
modFit <- train(Class ~ ., data = train, method = "rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
set.seed(125)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
modFit <- train(Case ~ ., data = training, method = "rpart")
segmentationOriginal
head(segmentationOriginal)
modFit <- train(Class ~ ., data = training, method = "rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
set.seed(125)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
modFit <- train(Class ~ ., data = training, method = "rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
modFit <- train(Class ~ ., training, method = "rpart")
modFinal <- train(Class ~ ., training, method="rpart", TotalIntench2=23,000, FiberWidthCh1=10, PerimStatusCh1=2)
modfit$FinalModel
modFit$FinalModel
modFit$finalModel
library(pgmm)
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modelFit <- train(Area ~ ., olive, method="rpart")
fancyRpartPlot(modFit$finalodel)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(caret)
fancyRpartPlot(modFit$finalModel)
library("rpart.plot")
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
newModel <- predict(modelFit, newdata)
newModel
colnames(olive)
class(olive$Area)
modelFit$finalModel
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
colnames(SAheart)
set.seed(13234)
modelFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, trainSA, method="glm", family="binomial")
prediction <- predict(modelFit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(testSA)
missClass(prediction)
missClass(trainSA$chd, predict(modelFit, trainSA))
missTrain <- missClass(trainSA$chd, predict(modelFit, trainSA))
missTest <- missClass(trainSA$chd, predict(modelFit, testSA))
missTrain
missTest
missTrain <- missClass(trainSA$chd, predict(modelFit, trainSA))
missTest <- missClass(testSA$chd, predict(modelFit, testSA))
missTrain
missTest
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
colnames(ElemStatLearn)
head(ElemStatLearn)
ElemStatLearn
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
class(vowel.train)
colnames(vowel.train)
class(vowel.train$y)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
class(vowel.test$y)
set.seed(33833)
modelFit <- train(y~., vowel.train, method="rf")
order(varImp(modelFit))
set.seed(33833)
modelFit <- train(y~., vowel.train, method="rf", prox=TRUE)
order(varImp(modelFit))
modelFit
varImp(modelFit)
order(varImp(modelFit))
class(modelFit)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
order(varImp(a))
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelFit <- train(y~., vowel.train, method="rf", prox=TRUE)
varImp(modelFit)
prediction <- predict(vowel.test, modelFit)
prediction <- predict(modelFit, vowel.test)
varImp(prediction)
prediction
modelFit
prediction
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(3833)
modelFit <- train(y~., vowel.train, method="rf", prox=TRUE)
varImp(modelFit)
library(ISLR)
install.packages("ISLR")
library(ISLR)
data(Wage)
library(ggplot2)
library(caret)
inBuild <- createDataPartition(y=Wage$wage, p=.7, list=FALSE)
validation <- Wage[-inBuild,]
buildData <- Wage[inBuild]
inTrain <- createDataPartition(y=buildData$wage, p=.7, list=FALSE)
buildData <- Wage[inBuild,]
inTrain <- createDataPartition(y=buildData$wage, p=.7, list=FALSE)
training <- buildData[inTrain,]
testing <- buildData[-inTrain,]
dim(training)
dim(testing)
dim(validatin)
dim(validation)
mod1 <- train(wage ~ ., method="glm", data=training)
mod2 <- train(wage ~., method="rf", data=training, trControl=trainControl(method="cv"), number=3)
pred1 <- predict(mod1, testing)
pred1
pred2 <- predict(mod2, testing)
qplot(pred1, pred2, color=wage, data=testing)
testing$wage
training$wage
preDF <- data.frame(pred1, pred2, wage=testing$wage)
preDF
head(preDF)
exit
install.packages("elasticnet")
library(AppliedPredictiveModeling)
library(forecast)
library(quantmod)
library(lubridate)
install.packages("forecast")
install.packages("forecast")
library(quantmod)
library(forecast)
library(lubridate)
library(forecast)
library(forecast)
library(quantmod)
library(lubridate)  # For year() function below
dat = read.csv("~/LL/Coursera/Courses/PracticalMachineLearning/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
setwd("~/datasciencecoursera/Courses/PracticalMachineLearning")
install.packages("e1071")
names(training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
head(training)
?train
svm <- train(CompressiveStrength ~ ., training, method="svmLinear")
acc
svm <- train(CompressiveStrength ~ ., training, method="svmLinear")
psvm <- predict(svm, testing)
cmsvm <- confusionMatrix(psvm, testing$CompressiveStrength)
acc <- cmsvm$overall['Accuracy']
psvm
nrow(svm)
length(svm)
nrow(training)
nrow(testing)
length(psvm)
length(cmsvm)
nrow(testing)
cmsvm <- confusionMatrix(psvm, testing$CompressiveStrength)
unique(training$CompressiveStrength)
class(training$CompressiveStrength)
class(testing$CompressiveStrength)
str(testing)
str(psvm)
str(svm)
svm
svm <- train(CompressiveStrength ~ ., training, method="svmLinear")
psvm <- predict(svm, testing)
acc <- accuracy(psvm, testing$CompressiveStrength)
ac
acc
acc$RMSE
acc$overall
acc
set.seed(325)
library(e1071)
library(kernlab)
svm <- train(CompressiveStrength ~ ., training, method="svmLinear")
psvm <- predict(svm, testing)
acc <- accuracy(psvm, testing$CompressiveStrength)
acc
set.seed(325)
library(e1071)
library(kernlab)
svm <- train(CompressiveStrength ~ ., training, method="svmRadial")
psvm <- predict(svm, testing)
acc <- accuracy(psvm, testing$CompressiveStrength)
acc
set.seed(325)
library(e1071)
library(caret)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
svmRadial <- train(CompressiveStrength ~ ., training, method="svmRadial")
lssvmLinear <- train(CompressiveStrength ~ ., training, method="lssvmLinear")
lssvmPoly <- train(CompressiveStrength ~ ., training, method="lssvmPoly")
lssvmRadial <- train(CompressiveStrength ~ ., training, method="lssvmRadial")
svmBoundrangeString <- train(CompressiveStrength ~ ., training, method="svmBoundrangeString")
svmRadialWeights <- train(CompressiveStrength ~ ., training, method="svmRadialWeights")
svmExpoString <- train(CompressiveStrength ~ ., training, method="svmExpoString")
svmLinear <- train(CompressiveStrength ~ ., training, method="svmLinear")
svmPoly <- train(CompressiveStrength ~ ., training, method="svmPoly")
svmRadial <- train(CompressiveStrength ~ ., training, method="svmRadial")
svmRadialCost <- train(CompressiveStrength ~ ., training, method="svmRadialCost")
svmSpectrumString <- train(CompressiveStrength ~ ., training, method="svmSpectrumString")
psvmRadial <- predict(svmRadial, testing)
plssvmLinear <- predict(lssvmLinear, testing)
plssvmPoly <- predict(lssvmPoly, testing)
plssvmRadial <- predict(lssvmRadial, testing)
psvmBoundrangeString <- predict(svmBoundrangeString, testing)
psvmRadialWeights <- predict(svmRadialWeights, testing)
psvmExpoString <- predict(svmExpoString, testing)
psvmLinear <- predict(svmLinear, testing)
psvmPoly <- predict(svmPoly, testing)
psvmRadial <- predict(svmRadial, testing)
psvmRadialCost <- predict(svmRadialCost, testing)
accsvmRadial <- accuracy(psvmRadial, testing$CompressiveStrength)
#acclssvmLinear <- accuracy(plssvmLinear, testing$CompressiveStrength)
#acclssvmPoly <- accuracy(plssvmPoly, testing$CompressiveStrength)
#acclssvmRadial <- accuracy(plssvmRadial, testing$CompressiveStrength)
#accsvmBoundrangeString <- accuracy(psvmBoundrangeString, testing$CompressiveStrength)
#accsvmRadialWeights <- accuracy(psvmRadialWeights, testing$CompressiveStrength)
#accsvmExpoString <- accuracy(psvmExpoString, testing$CompressiveStrength)
accsvmLinear <- accuracy(psvmLinear, testing$CompressiveStrength)
accsvmPoly <- accuracy(psvmPoly, testing$CompressiveStrength)
accsvmRadial <- accuracy(psvmRadial, testing$CompressiveStrength)
accsvmRadialCost <- accuracy(psvmRadialCost, testing$CompressiveStrength)
#accsvmSpectrumString <- accuracy(psvmSpectrumString, testing$CompressiveStrength)
results <- c(accsvmRadial, accsvmLinear, accsvmPoly, accsvmRadial, accsvmRadialCost)
results
accsvmRdial
accsvmRadial
accsvmRadial[2]
results <- c(accsvmRadial[2], accsvmLinear[2], accsvmPoly[2], accsvmRadial[2], accsvmRadialCost[2])
results
